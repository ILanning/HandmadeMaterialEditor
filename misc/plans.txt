Memory Allocation:
	The memory which will not change depending on the model and images loaded will be allocated as a single chunk and handled in the way shown on the Handmade Hero stream.
	The memory required for the images and models will be allocated on a file-by-file basis, with each file being its own object.

	Arena Types:
		StackArena:
			-Allows additions of arbitrary size
			-Anything may be accessed, but only the last item may be deleted
		FixedSizeArena (needs a better name):
			-The size of the items within is set at initialization
			-Items may be deleted at will
			-Keeps a heap (data structure) of deleted entries which starts at the end of the Arena and grows inwards
		NewDeleteArena:
			-Just a wrapper for new and delete
		FillInArena (needs a better name):
			-Allows additions of arbitary size, as well as deletions from anywhere
			-Each entry has a leading int32 denoting the size
			-Keeps a list of deleted entries and their sizes
			-New additions search the deleted list first, looking for an open spot of sufficient size
			-If it finds a space of the right size or greater, it fills that spot in and subtracts the space it used from the size of the entry
			-Prone to fragmentation over time if some entries are long lived and others are not


Core Goals:

	Start up an OpenGl context using GLEW 															   - Done
	Import an image using stb_image																	   - Done
	Draw the image on the screen																	   - Done
	Create Matrix4::CreateOrthographic(screenWidth, screenHeight);									   - Done
	Build a Model class and use it to draw axis arrows, a ground plane, and the test quad			   - Done
	Load an .obj file, including associated texture													   - Done
	Write path string handling functions to deal with the relative paths in files					   - Done
	Load a .mtl file																				   - Done
	Render a loaded model with OpenGL																   - Done
	Advanced .obj loading - Geometry becomes Mesh, new Geometry class composed of one or more meshes   - Done
	Advanced .obj loading - Add support for the new Geometry in ParseOBJ							   - Done
	Convert GLState into a controllable camera class												   - Done
	Cleanup Pass - Formalize GLState, PrepareScene, and GLRender									   - Done
	Cleanup Pass - Move rendering code out of platform layer (where appropriate)					   - Done
	Cleanup Pass - Organize everything into sensible namespaces										   - DELAYED (Low priority)
	Cleanup Pass - Ensure Doxygen support															   - DELAYED (Low priority)
	Cleanup Pass - Ensure robust unit tests exist for anything that they'd be sensible for			   - DELAYED (Low priority)
	Cleanup Pass - Reexamine TODOs and CONSIDERs													   - DELAYED (Low priority)

	Update build.bat to automatically hand the .cpp files in certain directories to MSVC			   - DELAYED (Low priority)
	Edit includes to be something more standard, compare compile times								   - DELAYED (Low priority)

	Finish Quaternion class                                                                            - Done (Enough for now, at least)
	Write StretchyArrayIterator class																   - DELAYED (Low priority)
	Write HandmadeString class																		   - DELAYED (Low priority)
	Write InputManager class																		   - Done (15/12/17)
	Add input control function to ThirdPersonCamera													   - 
	Write a spherical coordinates based camera														   - 
	Write MemoryArena class																			   - 
	Write ContentManager class																		   - 
	Write ShaderManager class																		   - 
	Cleanup Pass - Examine all uses of new, VirtualAlloc(), etc. and ensure that there aren't any memory leaks
	Cleanup Pass - Ensure Doxygen support
	Cleanup Pass - Ensure robust unit tests exist for anything that they'd be sensible for
	Cleanup Pass - Reexamine TODOs and CONSIDERs

	Write shaders for each of the material illumination models
	Apply material effects to the model as a preview

	Load a font using stb_truetype
	Render text to the screen
	Write TextPositionColor class
	Cleanup Pass - Ensure Doxygen support
	Cleanup Pass - Ensure robust unit tests exist for anything that they'd be sensible for
	Cleanup Pass - Reexamine TODOs and CONSIDERs

	Generate and draw the graphic for a button
	Render text to a button sprite
	Support UI rendering in the render engine
	Make the button clickable

	Due to time constraints, build demo here with button to reload .mtl from file on the fly

	Make an editable text box
	Display the material data on the screen with sensible components editable
	Allow saving of the file
	Cleanup Pass - Ensure Doxygen support
	Cleanup Pass - Ensure robust unit tests exist for anything that they'd be sensible for
	Cleanup Pass - Reexamine TODOs and CONSIDERs

	Replace UI code and platform layer with a C#/WPF application, using the same handmade.dll for both

	Develop a UE4 plugin with the same functionality, and if possible/sensible also using the same handmade.dll 

Nice To Have/Future Goals:

	Add audio

	Editing hints - say when a value is invalid, nonstandard, etc.

	Use a true rendering engine (Such as Pango) and UTF-8 for all sensible strings

	Make MTL and OBJ loaders extensible from outside libraries